AWSTemplateFormatVersion: 2010-09-09
Description: >
  Store Location Data ETL pipeline for Ana-Lattex Super Cafe project

Parameters:
  TeamName:
    Type: String
    Description: Enter the team name you want to use for DB connections
    Default: ana-lattex-SC

  EC2UserData:
    Type: String
    Desscription: Base64-encoded userdata for EC2 instances
    Default: ""

  NetworkStackName:
    Type: String
    Default: project-networking
    Description: Network stack with VPC containing Redshift instance

  LatestAmiId:
    # Use public Systems Manager Parameter
    # See https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: Automatically look up the latest AMI for Amazon Linux v2
    # so our EC2 can access other apps/apis:

  EC2InstanceProfileRoleName:
    Type: String
    Default: de-academy-ec2-role-instance-profile
    Description: The shared EC2 instance profile name to use
  
  EC2InstanceIngressIp:
   Type: String
   Description: Custom IP address for Grafana HTTP ingress rule
  
  EtlLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${TeamName}-store-etl-lambda'
      Runtime: python3.12
      Handler: etl_lambda.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/lambda-execution-role'
      Timeout: 30
      ReservedConcurrentExecutions: 10
      Code: ./src #tells aws cloudformation package to zip and upload src/
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${NetworkStackName}-VPCSGID'
        SubnetIds:
          - Fn::ImportValue: !Sub '${NetworkStackName}-PrivateSubnet0ID'
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-etl-lambda'
      Environment:
        Variables:
          SSM_PARAMETER_NAME: !Sub '${TeamName}_redshift_settings'

  RawDataBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - RawDataBucketPermission
      - EtlLambdaFunction
    Properties:
      BucketName: !Sub '${TeamName}-store-raw-data'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt EtlLambdaFunction.Arn
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-store-raw-data'

  RawDataBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EtlLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${TeamName}-store-raw-data'

  RawDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RawDataBucket
      PolicyDocument:
        Statement:
          - Sid: "AllowSSLRequestsOnly"
            Action: "s3:*"
            Principal: "*"
            Effect: "Deny"
            Resource:
              - !Sub "arn:aws:s3:::${TeamName}-store-raw-data"
              - !Sub "arn:aws:s3:::${TeamName}-store-raw-data/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"

  GrafanaEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro #type of EC2
      ImageId: !Ref LatestAmiId # Reference the special Parameter
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-store-ec2-grafana'
      LaunchTemplate:
        LaunchTemplateId: !Ref GrafanaEC2LaunchTemplate
        Version: !GetAtt GrafanaEC2LaunchTemplate.LatestVersionNumber

GrafanaEC2LaunchTemplate:
  Type: AWS::EC2::LaunchTemplate
  Properties:
    LaunchTemplateName: !Sub '${TeamName}-store-ec2-grafana-launch-template'
    VersionDescription: '01'
    LaunchTemplateData:
      UserData: !Ref EC2UserData
      IamInstanceProfile:
        Name: !Ref EC2InstanceProfileRoleName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpProtocolIpv6: disabled
        HttpPutResponseHopLimit: 10
        HttpTokens: optional
        InstanceMetadataTags: enabled
      Monitoring:
        Enabled: True
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 8
            Encrypted: true
            DeleteOnTermination: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue: !Sub '${NetworkStackName}-PublicSubnet0ID'
          Groups:
            - Fn::ImportValue: !Sub '${NetworkStackName}-VPCSGID'
            - !GetAtt GrafanaEC2InstanceSecurityGroup.GroupId

  GrafanaEC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Sets ingress and egress rules for HTTP, HTTPS and SSH
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-store-ec2-grafana'
      VpcId:
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIp: !Sub '${EC2InstanceIngressIp}/32'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Sub '${EC2InstanceIngressIp}/32'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Sub '${EC2InstanceIngressIp}/32'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0